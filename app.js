// Generated by CoffeeScript 1.6.2
(function() {
  var NumberOfRendersView, SomeCollection, SomeModel, SomeView, SomeViewWithRaf, _ref, _ref1, _ref2, _ref3, _ref4,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  SomeModel = (function(_super) {
    __extends(SomeModel, _super);

    function SomeModel() {
      _ref = SomeModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return SomeModel;

  })(Backbone.Model);

  SomeCollection = (function(_super) {
    __extends(SomeCollection, _super);

    function SomeCollection() {
      _ref1 = SomeCollection.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    SomeCollection.prototype.model = SomeModel;

    return SomeCollection;

  })(Backbone.Collection);

  SomeView = (function(_super) {
    __extends(SomeView, _super);

    function SomeView() {
      _ref2 = SomeView.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    SomeView.prototype.initialize = function() {
      this.state = new Backbone.Model({
        numberOfRenders: 0
      });
      return this.collection.on('add', this.render, this);
    };

    SomeView.prototype.render = function() {
      var html, n;

      n = this.state.get('numberOfRenders');
      this.state.set({
        numberOfRenders: n + 1
      });
      html = '<ul>';
      this.collection.each(function(x) {
        return html += "<li>" + (x.get('word')) + "</li>";
      });
      html += '<ul>';
      $(this.el).html(html);
      return this;
    };

    return SomeView;

  })(Backbone.View);

  SomeViewWithRaf = (function(_super) {
    __extends(SomeViewWithRaf, _super);

    function SomeViewWithRaf() {
      _ref3 = SomeViewWithRaf.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    SomeViewWithRaf.prototype.render = function() {
      var _this = this;

      if (!this.waitingForRender) {
        this.waitingForRender = true;
        window.requestAnimationFrame(function() {
          _this.waitingForRender = false;
          return SomeViewWithRaf.__super__.render.apply(_this, arguments);
        });
      }
      return this;
    };

    return SomeViewWithRaf;

  })(SomeView);

  NumberOfRendersView = (function(_super) {
    __extends(NumberOfRendersView, _super);

    function NumberOfRendersView() {
      _ref4 = NumberOfRendersView.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    NumberOfRendersView.prototype.initialize = function(_arg) {
      this.watchedState = _arg.watchedState;
      return this.watchedState.on('change:numberOfRenders', this.render, this);
    };

    NumberOfRendersView.prototype.render = function() {
      var n;

      n = this.watchedState.get('numberOfRenders');
      $(this.el).html("<p>Number of renders: " + n + "</p>");
      return this;
    };

    return NumberOfRendersView;

  })(Backbone.View);

  $(function() {
    var View, collection, countView, mainView, msg, selector, word, _i, _j, _len, _len1, _ref5, _ref6, _ref7;

    collection = new SomeCollection();
    _ref5 = [['#js-without-raf', SomeView], ['#js-with-raf', SomeViewWithRaf]];
    for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
      _ref6 = _ref5[_i], selector = _ref6[0], View = _ref6[1];
      mainView = new View({
        collection: collection
      });
      countView = new NumberOfRendersView({
        watchedState: mainView.state
      });
      $(selector).html(countView.render().el).append(mainView.render().el);
    }
    _ref7 = ['foo', 'bar', 'baz', 'qux', 'quux'];
    for (_j = 0, _len1 = _ref7.length; _j < _len1; _j++) {
      word = _ref7[_j];
      collection.add(new SomeModel({
        word: word
      }));
    }
    msg = 'delayed one second';
    return setTimeout((function() {
      return collection.add(new SomeModel({
        word: msg
      }));
    }), 1000);
  });

}).call(this);
